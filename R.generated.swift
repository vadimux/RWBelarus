//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `Roboto-Light.ttf`.
    static let robotoLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Light", pathExtension: "ttf")
    /// Resource file `Roboto-Medium.ttf`.
    static let robotoMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Medium", pathExtension: "ttf")
    /// Resource file `Roboto-Regular.ttf`.
    static let robotoRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Regular", pathExtension: "ttf")
    
    /// `bundle.url(forResource: "Roboto-Light", withExtension: "ttf")`
    static func robotoLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Roboto-Medium", withExtension: "ttf")`
    static func robotoMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Roboto-Regular", withExtension: "ttf")`
    static func robotoRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `Roboto-Light`.
    static let robotoLight = Rswift.FontResource(fontName: "Roboto-Light")
    /// Font `Roboto-Medium`.
    static let robotoMedium = Rswift.FontResource(fontName: "Roboto-Medium")
    /// Font `Roboto-Regular`.
    static let robotoRegular = Rswift.FontResource(fontName: "Roboto-Regular")
    
    /// `UIFont(name: "Roboto-Light", size: ...)`
    static func robotoLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoLight, size: size)
    }
    
    /// `UIFont(name: "Roboto-Medium", size: ...)`
    static func robotoMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMedium, size: size)
    }
    
    /// `UIFont(name: "Roboto-Regular", size: ...)`
    static func robotoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoRegular, size: size)
    }
    
    static func validate() throws {
      if R.font.robotoMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Medium' could not be loaded, is 'Roboto-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Regular' could not be loaded, is 'Roboto-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Light' could not be loaded, is 'Roboto-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 21 images.
  struct image {
    /// Image `basicCalendar`.
    static let basicCalendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "basicCalendar")
    /// Image `bzhd_0`.
    static let bzhd_0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bzhd_0")
    /// Image `city`.
    static let city = Rswift.ImageResource(bundle: R.hostingBundle, name: "city")
    /// Image `crossIcon`.
    static let crossIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "crossIcon")
    /// Image `fbLogo`.
    static let fbLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "fbLogo")
    /// Image `instaLogo`.
    static let instaLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "instaLogo")
    /// Image `international`.
    static let international = Rswift.ImageResource(bundle: R.hostingBundle, name: "international")
    /// Image `interregionalBusiness`.
    static let interregionalBusiness = Rswift.ImageResource(bundle: R.hostingBundle, name: "interregionalBusiness")
    /// Image `interregionalEconomy`.
    static let interregionalEconomy = Rswift.ImageResource(bundle: R.hostingBundle, name: "interregionalEconomy")
    /// Image `leftArrow`.
    static let leftArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "leftArrow")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `pin`.
    static let pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "pin")
    /// Image `rails`.
    static let rails = Rswift.ImageResource(bundle: R.hostingBundle, name: "rails")
    /// Image `regionBusiness`.
    static let regionBusiness = Rswift.ImageResource(bundle: R.hostingBundle, name: "regionBusiness")
    /// Image `region`.
    static let region = Rswift.ImageResource(bundle: R.hostingBundle, name: "region")
    /// Image `rightArrow`.
    static let rightArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "rightArrow")
    /// Image `setting`.
    static let setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "setting")
    /// Image `station`.
    static let station = Rswift.ImageResource(bundle: R.hostingBundle, name: "station")
    /// Image `train`.
    static let train = Rswift.ImageResource(bundle: R.hostingBundle, name: "train")
    /// Image `upDownArrow`.
    static let upDownArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "upDownArrow")
    /// Image `vkLogo`.
    static let vkLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "vkLogo")
    
    /// `UIImage(named: "basicCalendar", bundle: ..., traitCollection: ...)`
    static func basicCalendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.basicCalendar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bzhd_0", bundle: ..., traitCollection: ...)`
    static func bzhd_0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bzhd_0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "city", bundle: ..., traitCollection: ...)`
    static func city(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.city, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "crossIcon", bundle: ..., traitCollection: ...)`
    static func crossIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.crossIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fbLogo", bundle: ..., traitCollection: ...)`
    static func fbLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fbLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "instaLogo", bundle: ..., traitCollection: ...)`
    static func instaLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.instaLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "international", bundle: ..., traitCollection: ...)`
    static func international(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.international, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "interregionalBusiness", bundle: ..., traitCollection: ...)`
    static func interregionalBusiness(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.interregionalBusiness, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "interregionalEconomy", bundle: ..., traitCollection: ...)`
    static func interregionalEconomy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.interregionalEconomy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "leftArrow", bundle: ..., traitCollection: ...)`
    static func leftArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.leftArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pin", bundle: ..., traitCollection: ...)`
    static func pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rails", bundle: ..., traitCollection: ...)`
    static func rails(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rails, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "region", bundle: ..., traitCollection: ...)`
    static func region(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.region, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "regionBusiness", bundle: ..., traitCollection: ...)`
    static func regionBusiness(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.regionBusiness, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rightArrow", bundle: ..., traitCollection: ...)`
    static func rightArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "setting", bundle: ..., traitCollection: ...)`
    static func setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "station", bundle: ..., traitCollection: ...)`
    static func station(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.station, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "train", bundle: ..., traitCollection: ...)`
    static func train(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.train, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "upDownArrow", bundle: ..., traitCollection: ...)`
    static func upDownArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.upDownArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "vkLogo", bundle: ..., traitCollection: ...)`
    static func vkLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vkLogo, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `CarriageHeader`.
    static let carriageHeader = _R.nib._CarriageHeader()
    
    /// `UINib(name: "CarriageHeader", in: bundle)`
    static func carriageHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.carriageHeader)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 10 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CalendarCell`.
    static let calendarCell: Rswift.ReuseIdentifier<CalendarCell> = Rswift.ReuseIdentifier(identifier: "CalendarCell")
    /// Reuse identifier `autocompleteCell`.
    static let autocompleteCell: Rswift.ReuseIdentifier<AutocompleteCell> = Rswift.ReuseIdentifier(identifier: "autocompleteCell")
    /// Reuse identifier `autocompleteRouteCell`.
    static let autocompleteRouteCell: Rswift.ReuseIdentifier<AutocompleteRouteCell> = Rswift.ReuseIdentifier(identifier: "autocompleteRouteCell")
    /// Reuse identifier `carriageSchemeCell`.
    static let carriageSchemeCell: Rswift.ReuseIdentifier<CarriageSchemeCell> = Rswift.ReuseIdentifier(identifier: "carriageSchemeCell")
    /// Reuse identifier `fullRouteCell`.
    static let fullRouteCell: Rswift.ReuseIdentifier<FullRouteCell> = Rswift.ReuseIdentifier(identifier: "fullRouteCell")
    /// Reuse identifier `headerResultCell`.
    static let headerResultCell: Rswift.ReuseIdentifier<HeaderResultCell> = Rswift.ReuseIdentifier(identifier: "headerResultCell")
    /// Reuse identifier `searchResultCell`.
    static let searchResultCell: Rswift.ReuseIdentifier<SearchResultCell> = Rswift.ReuseIdentifier(identifier: "searchResultCell")
    /// Reuse identifier `settingCell`.
    static let settingCell: Rswift.ReuseIdentifier<SettingsCell> = Rswift.ReuseIdentifier(identifier: "settingCell")
    /// Reuse identifier `stationScheduleCell`.
    static let stationScheduleCell: Rswift.ReuseIdentifier<StationScheduleCell> = Rswift.ReuseIdentifier(identifier: "stationScheduleCell")
    /// Reuse identifier `ticketInfoCell`.
    static let ticketInfoCell: Rswift.ReuseIdentifier<TicketInfoCell> = Rswift.ReuseIdentifier(identifier: "ticketInfoCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 8 storyboards.
  struct storyboard {
    /// Storyboard `Favorite`.
    static let favorite = _R.storyboard.favorite()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `RouteResult`.
    static let routeResult = _R.storyboard.routeResult()
    /// Storyboard `Search`.
    static let search = _R.storyboard.search()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()
    /// Storyboard `Station`.
    static let station = _R.storyboard.station()
    
    /// `UIStoryboard(name: "Favorite", bundle: ...)`
    static func favorite(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.favorite)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "RouteResult", bundle: ...)`
    static func routeResult(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.routeResult)
    }
    
    /// `UIStoryboard(name: "Search", bundle: ...)`
    static func search(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.search)
    }
    
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settings)
    }
    
    /// `UIStoryboard(name: "Station", bundle: ...)`
    static func station(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.station)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 51 localization keys.
    struct localizable {
      /// Base translation: Add your message text here
      /// 
      /// Locales: Base, ru, be-BY
      static let добавьтеВашТекстСообщенияСюда = Rswift.StringResource(key: "Добавьте Ваш текст сообщения сюда", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: Arrival: 
      /// 
      /// Locales: Base, ru, be-BY
      static let прибытие = Rswift.StringResource(key: "Прибытие: ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: Belonging wagon: 
      /// 
      /// Locales: Base, ru, be-BY
      static let принадлежностьВагона = Rswift.StringResource(key: "Принадлежность вагона: ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: CL
      /// 
      /// Locales: Base
      static let cityLines = Rswift.StringResource(key: "City lines", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Cancel
      /// 
      /// Locales: Base, ru, be-BY
      static let отмена = Rswift.StringResource(key: "Отмена", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: Carrier: 
      /// 
      /// Locales: Base, ru, be-BY
      static let перевозчик = Rswift.StringResource(key: "Перевозчик: ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: Cities and stations
      /// 
      /// Locales: Base, ru, be-BY
      static let городаИСтанции = Rswift.StringResource(key: "Города и станции", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: City lines
      /// 
      /// Locales: Base, ru, be-BY
      static let cL = Rswift.StringResource(key: "CL", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: Departure: 
      /// 
      /// Locales: Base, ru, be-BY
      static let отправление = Rswift.StringResource(key: "Отправление: ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: Done
      /// 
      /// Locales: Base, ru, be-BY
      static let продолжить = Rswift.StringResource(key: "Продолжить", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: FROM
      /// 
      /// Locales: Base, ru, be-BY
      static let оТКУДА = Rswift.StringResource(key: "ОТКУДА", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: From
      /// 
      /// Locales: Base, ru, be-BY
      static let откуда = Rswift.StringResource(key: "Откуда", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: IBCL
      /// 
      /// Locales: Base
      static let interregionalBusinessClassLines = Rswift.StringResource(key: "Interregional business class lines", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: IEL
      /// 
      /// Locales: Base
      static let interregionalEconomyLines = Rswift.StringResource(key: "Interregional economy lines", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: IL
      /// 
      /// Locales: Base
      static let internationalLines = Rswift.StringResource(key: "International Lines", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: International Lines
      /// 
      /// Locales: Base, ru, be-BY
      static let iL = Rswift.StringResource(key: "IL", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: Interregional business class lines
      /// 
      /// Locales: Base, ru, be-BY
      static let ibcL = Rswift.StringResource(key: "IBCL", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: Interregional economy lines
      /// 
      /// Locales: Base, ru, be-BY
      static let ieL = Rswift.StringResource(key: "IEL", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: Join us in social networks
      /// 
      /// Locales: Base, ru, be-BY
      static let присоединяйтесьКНамВСоциальныхСетях = Rswift.StringResource(key: "Присоединяйтесь к нам в социальных сетях", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: No stations with this name were found
      /// 
      /// Locales: Base, ru, be-BY
      static let станцииСТакимНазваниемНеНайдено = Rswift.StringResource(key: "Станции с таким названием не найдено", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: Non-availability: 
      /// 
      /// Locales: Base, ru, be-BY
      static let номераСвободныхМест = Rswift.StringResource(key: "Номера свободных мест: ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: Not available until the first route search
      /// 
      /// Locales: Base, ru, be-BY
      static let недоступноДоПервогоПоискаПоМаршруту = Rswift.StringResource(key: "Недоступно до первого поиска по маршруту", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: RBCL
      /// 
      /// Locales: Base
      static let regionalBusinessClassLines = Rswift.StringResource(key: "Regional business class lines", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: RECL
      /// 
      /// Locales: Base
      static let regionalEconomyClassLines = Rswift.StringResource(key: "Regional economy class lines", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Regional business class lines
      /// 
      /// Locales: Base, ru, be-BY
      static let rbcL = Rswift.StringResource(key: "RBCL", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: Regional economy class lines
      /// 
      /// Locales: Base, ru, be-BY
      static let recL = Rswift.StringResource(key: "RECL", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: Routes
      /// 
      /// Locales: Base, ru, be-BY
      static let маршруты = Rswift.StringResource(key: "Маршруты", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: SCHEDULE
      /// 
      /// Locales: Base, ru, be-BY
      static let рАСПИСАНИЕ = Rswift.StringResource(key: "РАСПИСАНИЕ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: SEARCH TRAINS
      /// 
      /// Locales: Base, ru, be-BY
      static let нАЙТИПОЕЗДА = Rswift.StringResource(key: "НАЙТИ ПОЕЗДА", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: STATION
      /// 
      /// Locales: Base, ru, be-BY
      static let сТАНЦИЯ = Rswift.StringResource(key: "СТАНЦИЯ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: Search by station or route
      /// 
      /// Locales: Base, ru, be-BY
      static let поискПоСтанцииИлиМаршруту = Rswift.StringResource(key: "Поиск по станции или маршруту", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: Select a day
      /// 
      /// Locales: Base, ru, be-BY
      static let выберитеДень = Rswift.StringResource(key: "Выберите день", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: Send email to dev team
      /// 
      /// Locales: Base, ru, be-BY
      static let отправитьПисьмоРазработчикам = Rswift.StringResource(key: "Отправить письмо разработчикам", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: Station Schedule
      /// 
      /// Locales: Base, ru, be-BY
      static let расписаниеПоСтанции = Rswift.StringResource(key: "Расписание по станции", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: Stops: 
      /// 
      /// Locales: Base, ru, be-BY
      static let остановки = Rswift.StringResource(key: "Остановки: ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: TO
      /// 
      /// Locales: Base, ru, be-BY
      static let кУДА = Rswift.StringResource(key: "КУДА", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: Tariff: 
      /// 
      /// Locales: Base, ru, be-BY
      static let тариф = Rswift.StringResource(key: "Тариф: ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: The received information cannot be converted.
      /// 
      /// Locales: Base, ru, be-BY
      static let полученнуюИнформациюНеУдаетсяПреобразовать = Rswift.StringResource(key: "Полученную информацию не удается преобразовать", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: Tickets
      /// 
      /// Locales: Base, ru, be-BY
      static let билеты = Rswift.StringResource(key: "Билеты", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: To
      /// 
      /// Locales: Base, ru, be-BY
      static let куда = Rswift.StringResource(key: "Куда", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: Train days: 
      /// 
      /// Locales: Base, ru, be-BY
      static let дниКурсирования = Rswift.StringResource(key: "Дни курсирования: ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: Type: 
      /// 
      /// Locales: Base, ru, be-BY
      static let тип = Rswift.StringResource(key: "Тип: ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: Unfortunately, no train found
      /// 
      /// Locales: Base, ru, be-BY
      static let кСожалениюПоездаНеНайдены = Rswift.StringResource(key: "К сожалению, поезда не найдены", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: Unfortunately, the information on the car is not found
      /// 
      /// Locales: Base, ru, be-BY
      static let кСожалениюИнформацияПоВагонуНеНайдена = Rswift.StringResource(key: "К сожалению, информация по вагону не найдена", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: Unfortunately, the route information was not found
      /// 
      /// Locales: Base, ru, be-BY
      static let кСожалениюИнформацияПоМаршрутуНеНайдена = Rswift.StringResource(key: "К сожалению, информация по маршруту не найдена", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: Wagon: 
      /// 
      /// Locales: Base, ru, be-BY
      static let номерВагона = Rswift.StringResource(key: "Номер вагона: ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: When
      /// 
      /// Locales: Base, ru, be-BY
      static let когда = Rswift.StringResource(key: "Когда", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: all days
      /// 
      /// Locales: Base, ru, be-BY
      static let наВсеДни = Rswift.StringResource(key: "на все дни", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: empty seats: 
      /// 
      /// Locales: Base, ru, be-BY
      static let свободныхМест = Rswift.StringResource(key: "Свободных мест: ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: today
      /// 
      /// Locales: Base, ru, be-BY
      static let сегодня = Rswift.StringResource(key: "сегодня", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      /// Base translation: tomorrow
      /// 
      /// Locales: Base, ru, be-BY
      static let завтра = Rswift.StringResource(key: "завтра", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "be-BY"], comment: nil)
      
      /// Base translation: Add your message text here
      /// 
      /// Locales: Base, ru, be-BY
      static func добавьтеВашТекстСообщенияСюда(_: Void = ()) -> String {
        return NSLocalizedString("Добавьте Ваш текст сообщения сюда", bundle: R.hostingBundle, value: "Add your message text here", comment: "")
      }
      
      /// Base translation: Arrival: 
      /// 
      /// Locales: Base, ru, be-BY
      static func прибытие(_: Void = ()) -> String {
        return NSLocalizedString("Прибытие: ", bundle: R.hostingBundle, value: "Arrival: ", comment: "")
      }
      
      /// Base translation: Belonging wagon: 
      /// 
      /// Locales: Base, ru, be-BY
      static func принадлежностьВагона(_: Void = ()) -> String {
        return NSLocalizedString("Принадлежность вагона: ", bundle: R.hostingBundle, value: "Belonging wagon: ", comment: "")
      }
      
      /// Base translation: CL
      /// 
      /// Locales: Base
      static func cityLines(_: Void = ()) -> String {
        return NSLocalizedString("City lines", bundle: R.hostingBundle, value: "CL", comment: "")
      }
      
      /// Base translation: Cancel
      /// 
      /// Locales: Base, ru, be-BY
      static func отмена(_: Void = ()) -> String {
        return NSLocalizedString("Отмена", bundle: R.hostingBundle, value: "Cancel", comment: "")
      }
      
      /// Base translation: Carrier: 
      /// 
      /// Locales: Base, ru, be-BY
      static func перевозчик(_: Void = ()) -> String {
        return NSLocalizedString("Перевозчик: ", bundle: R.hostingBundle, value: "Carrier: ", comment: "")
      }
      
      /// Base translation: Cities and stations
      /// 
      /// Locales: Base, ru, be-BY
      static func городаИСтанции(_: Void = ()) -> String {
        return NSLocalizedString("Города и станции", bundle: R.hostingBundle, value: "Cities and stations", comment: "")
      }
      
      /// Base translation: City lines
      /// 
      /// Locales: Base, ru, be-BY
      static func cL(_: Void = ()) -> String {
        return NSLocalizedString("CL", bundle: R.hostingBundle, value: "City lines", comment: "")
      }
      
      /// Base translation: Departure: 
      /// 
      /// Locales: Base, ru, be-BY
      static func отправление(_: Void = ()) -> String {
        return NSLocalizedString("Отправление: ", bundle: R.hostingBundle, value: "Departure: ", comment: "")
      }
      
      /// Base translation: Done
      /// 
      /// Locales: Base, ru, be-BY
      static func продолжить(_: Void = ()) -> String {
        return NSLocalizedString("Продолжить", bundle: R.hostingBundle, value: "Done", comment: "")
      }
      
      /// Base translation: FROM
      /// 
      /// Locales: Base, ru, be-BY
      static func оТКУДА(_: Void = ()) -> String {
        return NSLocalizedString("ОТКУДА", bundle: R.hostingBundle, value: "FROM", comment: "")
      }
      
      /// Base translation: From
      /// 
      /// Locales: Base, ru, be-BY
      static func откуда(_: Void = ()) -> String {
        return NSLocalizedString("Откуда", bundle: R.hostingBundle, value: "From", comment: "")
      }
      
      /// Base translation: IBCL
      /// 
      /// Locales: Base
      static func interregionalBusinessClassLines(_: Void = ()) -> String {
        return NSLocalizedString("Interregional business class lines", bundle: R.hostingBundle, value: "IBCL", comment: "")
      }
      
      /// Base translation: IEL
      /// 
      /// Locales: Base
      static func interregionalEconomyLines(_: Void = ()) -> String {
        return NSLocalizedString("Interregional economy lines", bundle: R.hostingBundle, value: "IEL", comment: "")
      }
      
      /// Base translation: IL
      /// 
      /// Locales: Base
      static func internationalLines(_: Void = ()) -> String {
        return NSLocalizedString("International Lines", bundle: R.hostingBundle, value: "IL", comment: "")
      }
      
      /// Base translation: International Lines
      /// 
      /// Locales: Base, ru, be-BY
      static func iL(_: Void = ()) -> String {
        return NSLocalizedString("IL", bundle: R.hostingBundle, value: "International Lines", comment: "")
      }
      
      /// Base translation: Interregional business class lines
      /// 
      /// Locales: Base, ru, be-BY
      static func ibcL(_: Void = ()) -> String {
        return NSLocalizedString("IBCL", bundle: R.hostingBundle, value: "Interregional business class lines", comment: "")
      }
      
      /// Base translation: Interregional economy lines
      /// 
      /// Locales: Base, ru, be-BY
      static func ieL(_: Void = ()) -> String {
        return NSLocalizedString("IEL", bundle: R.hostingBundle, value: "Interregional economy lines", comment: "")
      }
      
      /// Base translation: Join us in social networks
      /// 
      /// Locales: Base, ru, be-BY
      static func присоединяйтесьКНамВСоциальныхСетях(_: Void = ()) -> String {
        return NSLocalizedString("Присоединяйтесь к нам в социальных сетях", bundle: R.hostingBundle, value: "Join us in social networks", comment: "")
      }
      
      /// Base translation: No stations with this name were found
      /// 
      /// Locales: Base, ru, be-BY
      static func станцииСТакимНазваниемНеНайдено(_: Void = ()) -> String {
        return NSLocalizedString("Станции с таким названием не найдено", bundle: R.hostingBundle, value: "No stations with this name were found", comment: "")
      }
      
      /// Base translation: Non-availability: 
      /// 
      /// Locales: Base, ru, be-BY
      static func номераСвободныхМест(_: Void = ()) -> String {
        return NSLocalizedString("Номера свободных мест: ", bundle: R.hostingBundle, value: "Non-availability: ", comment: "")
      }
      
      /// Base translation: Not available until the first route search
      /// 
      /// Locales: Base, ru, be-BY
      static func недоступноДоПервогоПоискаПоМаршруту(_: Void = ()) -> String {
        return NSLocalizedString("Недоступно до первого поиска по маршруту", bundle: R.hostingBundle, value: "Not available until the first route search", comment: "")
      }
      
      /// Base translation: RBCL
      /// 
      /// Locales: Base
      static func regionalBusinessClassLines(_: Void = ()) -> String {
        return NSLocalizedString("Regional business class lines", bundle: R.hostingBundle, value: "RBCL", comment: "")
      }
      
      /// Base translation: RECL
      /// 
      /// Locales: Base
      static func regionalEconomyClassLines(_: Void = ()) -> String {
        return NSLocalizedString("Regional economy class lines", bundle: R.hostingBundle, value: "RECL", comment: "")
      }
      
      /// Base translation: Regional business class lines
      /// 
      /// Locales: Base, ru, be-BY
      static func rbcL(_: Void = ()) -> String {
        return NSLocalizedString("RBCL", bundle: R.hostingBundle, value: "Regional business class lines", comment: "")
      }
      
      /// Base translation: Regional economy class lines
      /// 
      /// Locales: Base, ru, be-BY
      static func recL(_: Void = ()) -> String {
        return NSLocalizedString("RECL", bundle: R.hostingBundle, value: "Regional economy class lines", comment: "")
      }
      
      /// Base translation: Routes
      /// 
      /// Locales: Base, ru, be-BY
      static func маршруты(_: Void = ()) -> String {
        return NSLocalizedString("Маршруты", bundle: R.hostingBundle, value: "Routes", comment: "")
      }
      
      /// Base translation: SCHEDULE
      /// 
      /// Locales: Base, ru, be-BY
      static func рАСПИСАНИЕ(_: Void = ()) -> String {
        return NSLocalizedString("РАСПИСАНИЕ", bundle: R.hostingBundle, value: "SCHEDULE", comment: "")
      }
      
      /// Base translation: SEARCH TRAINS
      /// 
      /// Locales: Base, ru, be-BY
      static func нАЙТИПОЕЗДА(_: Void = ()) -> String {
        return NSLocalizedString("НАЙТИ ПОЕЗДА", bundle: R.hostingBundle, value: "SEARCH TRAINS", comment: "")
      }
      
      /// Base translation: STATION
      /// 
      /// Locales: Base, ru, be-BY
      static func сТАНЦИЯ(_: Void = ()) -> String {
        return NSLocalizedString("СТАНЦИЯ", bundle: R.hostingBundle, value: "STATION", comment: "")
      }
      
      /// Base translation: Search by station or route
      /// 
      /// Locales: Base, ru, be-BY
      static func поискПоСтанцииИлиМаршруту(_: Void = ()) -> String {
        return NSLocalizedString("Поиск по станции или маршруту", bundle: R.hostingBundle, value: "Search by station or route", comment: "")
      }
      
      /// Base translation: Select a day
      /// 
      /// Locales: Base, ru, be-BY
      static func выберитеДень(_: Void = ()) -> String {
        return NSLocalizedString("Выберите день", bundle: R.hostingBundle, value: "Select a day", comment: "")
      }
      
      /// Base translation: Send email to dev team
      /// 
      /// Locales: Base, ru, be-BY
      static func отправитьПисьмоРазработчикам(_: Void = ()) -> String {
        return NSLocalizedString("Отправить письмо разработчикам", bundle: R.hostingBundle, value: "Send email to dev team", comment: "")
      }
      
      /// Base translation: Station Schedule
      /// 
      /// Locales: Base, ru, be-BY
      static func расписаниеПоСтанции(_: Void = ()) -> String {
        return NSLocalizedString("Расписание по станции", bundle: R.hostingBundle, value: "Station Schedule", comment: "")
      }
      
      /// Base translation: Stops: 
      /// 
      /// Locales: Base, ru, be-BY
      static func остановки(_: Void = ()) -> String {
        return NSLocalizedString("Остановки: ", bundle: R.hostingBundle, value: "Stops: ", comment: "")
      }
      
      /// Base translation: TO
      /// 
      /// Locales: Base, ru, be-BY
      static func кУДА(_: Void = ()) -> String {
        return NSLocalizedString("КУДА", bundle: R.hostingBundle, value: "TO", comment: "")
      }
      
      /// Base translation: Tariff: 
      /// 
      /// Locales: Base, ru, be-BY
      static func тариф(_: Void = ()) -> String {
        return NSLocalizedString("Тариф: ", bundle: R.hostingBundle, value: "Tariff: ", comment: "")
      }
      
      /// Base translation: The received information cannot be converted.
      /// 
      /// Locales: Base, ru, be-BY
      static func полученнуюИнформациюНеУдаетсяПреобразовать(_: Void = ()) -> String {
        return NSLocalizedString("Полученную информацию не удается преобразовать", bundle: R.hostingBundle, value: "The received information cannot be converted.", comment: "")
      }
      
      /// Base translation: Tickets
      /// 
      /// Locales: Base, ru, be-BY
      static func билеты(_: Void = ()) -> String {
        return NSLocalizedString("Билеты", bundle: R.hostingBundle, value: "Tickets", comment: "")
      }
      
      /// Base translation: To
      /// 
      /// Locales: Base, ru, be-BY
      static func куда(_: Void = ()) -> String {
        return NSLocalizedString("Куда", bundle: R.hostingBundle, value: "To", comment: "")
      }
      
      /// Base translation: Train days: 
      /// 
      /// Locales: Base, ru, be-BY
      static func дниКурсирования(_: Void = ()) -> String {
        return NSLocalizedString("Дни курсирования: ", bundle: R.hostingBundle, value: "Train days: ", comment: "")
      }
      
      /// Base translation: Type: 
      /// 
      /// Locales: Base, ru, be-BY
      static func тип(_: Void = ()) -> String {
        return NSLocalizedString("Тип: ", bundle: R.hostingBundle, value: "Type: ", comment: "")
      }
      
      /// Base translation: Unfortunately, no train found
      /// 
      /// Locales: Base, ru, be-BY
      static func кСожалениюПоездаНеНайдены(_: Void = ()) -> String {
        return NSLocalizedString("К сожалению, поезда не найдены", bundle: R.hostingBundle, value: "Unfortunately, no train found", comment: "")
      }
      
      /// Base translation: Unfortunately, the information on the car is not found
      /// 
      /// Locales: Base, ru, be-BY
      static func кСожалениюИнформацияПоВагонуНеНайдена(_: Void = ()) -> String {
        return NSLocalizedString("К сожалению, информация по вагону не найдена", bundle: R.hostingBundle, value: "Unfortunately, the information on the car is not found", comment: "")
      }
      
      /// Base translation: Unfortunately, the route information was not found
      /// 
      /// Locales: Base, ru, be-BY
      static func кСожалениюИнформацияПоМаршрутуНеНайдена(_: Void = ()) -> String {
        return NSLocalizedString("К сожалению, информация по маршруту не найдена", bundle: R.hostingBundle, value: "Unfortunately, the route information was not found", comment: "")
      }
      
      /// Base translation: Wagon: 
      /// 
      /// Locales: Base, ru, be-BY
      static func номерВагона(_: Void = ()) -> String {
        return NSLocalizedString("Номер вагона: ", bundle: R.hostingBundle, value: "Wagon: ", comment: "")
      }
      
      /// Base translation: When
      /// 
      /// Locales: Base, ru, be-BY
      static func когда(_: Void = ()) -> String {
        return NSLocalizedString("Когда", bundle: R.hostingBundle, value: "When", comment: "")
      }
      
      /// Base translation: all days
      /// 
      /// Locales: Base, ru, be-BY
      static func наВсеДни(_: Void = ()) -> String {
        return NSLocalizedString("на все дни", bundle: R.hostingBundle, value: "all days", comment: "")
      }
      
      /// Base translation: empty seats: 
      /// 
      /// Locales: Base, ru, be-BY
      static func свободныхМест(_: Void = ()) -> String {
        return NSLocalizedString("Свободных мест: ", bundle: R.hostingBundle, value: "empty seats: ", comment: "")
      }
      
      /// Base translation: today
      /// 
      /// Locales: Base, ru, be-BY
      static func сегодня(_: Void = ()) -> String {
        return NSLocalizedString("сегодня", bundle: R.hostingBundle, value: "today", comment: "")
      }
      
      /// Base translation: tomorrow
      /// 
      /// Locales: Base, ru, be-BY
      static func завтра(_: Void = ()) -> String {
        return NSLocalizedString("завтра", bundle: R.hostingBundle, value: "tomorrow", comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 0 localization keys.
    struct main {
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _CarriageHeader: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CarriageHeader"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CarriageHeader? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CarriageHeader
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try routeResult.validate()
      try login.validate()
      try main.validate()
      try search.validate()
      try settings.validate()
      try station.validate()
      try launchScreen.validate()
    }
    
    struct favorite: Rswift.StoryboardResourceType {
      let bundle = R.hostingBundle
      let name = "Favorite"
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController
      
      let bundle = R.hostingBundle
      let loginNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "LoginNavigationController")
      let name = "Login"
      
      func loginNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginNavigationController)
      }
      
      static func validate() throws {
        if _R.storyboard.login().loginNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginNavigationController' could not be loaded from storyboard 'Login' as 'UIKit.UINavigationController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController
      
      let bundle = R.hostingBundle
      let name = "Main"
      let tabsViewController = StoryboardViewControllerResource<UIKit.UITabBarController>(identifier: "TabsViewController")
      
      func tabsViewController(_: Void = ()) -> UIKit.UITabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabsViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.main().tabsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabsViewController' could not be loaded from storyboard 'Main' as 'UIKit.UITabBarController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct routeResult: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let carriageSchemeViewController = StoryboardViewControllerResource<CarriageSchemeViewController>(identifier: "CarriageSchemeViewController")
      let fullRouteViewController = StoryboardViewControllerResource<FullRouteViewController>(identifier: "FullRouteViewController")
      let name = "RouteResult"
      let routeResultNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "RouteResultNavigationController")
      let routeResultViewController = StoryboardViewControllerResource<RouteResultViewController>(identifier: "RouteResultViewController")
      
      func carriageSchemeViewController(_: Void = ()) -> CarriageSchemeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: carriageSchemeViewController)
      }
      
      func fullRouteViewController(_: Void = ()) -> FullRouteViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: fullRouteViewController)
      }
      
      func routeResultNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: routeResultNavigationController)
      }
      
      func routeResultViewController(_: Void = ()) -> RouteResultViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: routeResultViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "rails") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rails' is used in storyboard 'RouteResult', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bzhd_0") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bzhd_0' is used in storyboard 'RouteResult', but couldn't be loaded.") }
        if _R.storyboard.routeResult().routeResultViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'routeResultViewController' could not be loaded from storyboard 'RouteResult' as 'RouteResultViewController'.") }
        if _R.storyboard.routeResult().routeResultNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'routeResultNavigationController' could not be loaded from storyboard 'RouteResult' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.routeResult().fullRouteViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'fullRouteViewController' could not be loaded from storyboard 'RouteResult' as 'FullRouteViewController'.") }
        if _R.storyboard.routeResult().carriageSchemeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'carriageSchemeViewController' could not be loaded from storyboard 'RouteResult' as 'CarriageSchemeViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct search: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController
      
      let bundle = R.hostingBundle
      let calendarViewController = StoryboardViewControllerResource<CalendarViewController>(identifier: "CalendarViewController")
      let name = "Search"
      let searchAutocompleteViewController = StoryboardViewControllerResource<SearchAutocompleteViewController>(identifier: "SearchAutocompleteViewController")
      let searchNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "SearchNavigationController")
      let searchViewController = StoryboardViewControllerResource<SearchViewController>(identifier: "SearchViewController")
      
      func calendarViewController(_: Void = ()) -> CalendarViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: calendarViewController)
      }
      
      func searchAutocompleteViewController(_: Void = ()) -> SearchAutocompleteViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchAutocompleteViewController)
      }
      
      func searchNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchNavigationController)
      }
      
      func searchViewController(_: Void = ()) -> SearchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "rightArrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rightArrow' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "train") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'train' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "upDownArrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'upDownArrow' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "basicCalendar") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'basicCalendar' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "rails") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rails' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "leftArrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'leftArrow' is used in storyboard 'Search', but couldn't be loaded.") }
        if _R.storyboard.search().searchAutocompleteViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchAutocompleteViewController' could not be loaded from storyboard 'Search' as 'SearchAutocompleteViewController'.") }
        if _R.storyboard.search().searchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchViewController' could not be loaded from storyboard 'Search' as 'SearchViewController'.") }
        if _R.storyboard.search().calendarViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'calendarViewController' could not be loaded from storyboard 'Search' as 'CalendarViewController'.") }
        if _R.storyboard.search().searchNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchNavigationController' could not be loaded from storyboard 'Search' as 'UIKit.UINavigationController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct settings: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController
      
      let bundle = R.hostingBundle
      let name = "Settings"
      let settingsNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "SettingsNavigationController")
      
      func settingsNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsNavigationController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "setting") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'setting' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fbLogo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fbLogo' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "instaLogo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'instaLogo' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "vkLogo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'vkLogo' is used in storyboard 'Settings', but couldn't be loaded.") }
        if _R.storyboard.settings().settingsNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsNavigationController' could not be loaded from storyboard 'Settings' as 'UIKit.UINavigationController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct station: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController
      
      let bundle = R.hostingBundle
      let name = "Station"
      let scheduleStationNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "ScheduleStationNavigationController")
      let scheduleStationViewController = StoryboardViewControllerResource<ScheduleStationViewController>(identifier: "ScheduleStationViewController")
      
      func scheduleStationNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: scheduleStationNavigationController)
      }
      
      func scheduleStationViewController(_: Void = ()) -> ScheduleStationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: scheduleStationViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "basicCalendar") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'basicCalendar' is used in storyboard 'Station', but couldn't be loaded.") }
        if UIKit.UIImage(named: "station") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'station' is used in storyboard 'Station', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pin") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pin' is used in storyboard 'Station', but couldn't be loaded.") }
        if _R.storyboard.station().scheduleStationNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'scheduleStationNavigationController' could not be loaded from storyboard 'Station' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.station().scheduleStationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'scheduleStationViewController' could not be loaded from storyboard 'Station' as 'ScheduleStationViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
